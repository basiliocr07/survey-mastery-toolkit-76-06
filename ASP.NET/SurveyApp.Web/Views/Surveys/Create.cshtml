
@model SurveyApp.Web.Models.CreateSurveyViewModel
@{
    ViewData["Title"] = "Create New Survey";
}

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-2xl font-bold">Create New Survey</h1>
            <p class="text-muted-foreground">Design your survey by adding questions and configuring settings</p>
        </div>
        <div>
            <a asp-controller="Surveys" asp-action="Index" class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-left mr-2 h-4 w-4"><path d="m12 19-7-7 7-7"></path><path d="M19 12H5"></path></svg>
                Back to Surveys
            </a>
        </div>
    </div>

    <form asp-action="Create" method="post" class="space-y-8">
        <div class="grid gap-6">
            <div class="space-y-2">
                <label for="Title" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Survey Title</label>
                <input asp-for="Title" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" placeholder="Enter survey title" />
                <span asp-validation-for="Title" class="text-sm text-destructive"></span>
            </div>
            
            <div class="space-y-2">
                <label for="Description" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Description</label>
                <textarea asp-for="Description" class="flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" placeholder="Describe what this survey is about"></textarea>
                <span asp-validation-for="Description" class="text-sm text-destructive"></span>
            </div>
        </div>
        
        <div>
            <h2 class="text-xl font-semibold mb-4">Survey Questions</h2>
            
            <div id="questions-container" class="space-y-6">
                @for (int i = 0; i < Model.Questions.Count; i++)
                {
                    <div class="question-card p-6 border rounded-lg">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="font-medium">Question @(i + 1)</h3>
                            
                            <button type="button" class="remove-question text-sm text-destructive" data-index="@i">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
                                <span>Remove</span>
                            </button>
                        </div>
                        
                        <div class="space-y-4">
                            <input type="hidden" name="Questions[@i].Id" value="@Model.Questions[i].Id" />
                            
                            <div class="space-y-2">
                                <label class="text-sm font-medium">Question Text</label>
                                <input type="text" name="Questions[@i].Text" value="@Model.Questions[i].Text" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" placeholder="Enter your question" />
                            </div>
                            
                            <div class="space-y-2">
                                <label class="text-sm font-medium">Question Type</label>
                                <select 
                                    name="Questions[@i].Type" 
                                    class="question-type flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                >
                                    <option value="text" selected="@(Model.Questions[i].Type == "text")">Text Input</option>
                                    <option value="single-choice" selected="@(Model.Questions[i].Type == "single-choice")">Single Choice</option>
                                    <option value="multiple-choice" selected="@(Model.Questions[i].Type == "multiple-choice")">Multiple Choice</option>
                                    <option value="rating" selected="@(Model.Questions[i].Type == "rating")">Rating</option>
                                    <option value="dropdown" selected="@(Model.Questions[i].Type == "dropdown")">Dropdown</option>
                                    <option value="nps" selected="@(Model.Questions[i].Type == "nps")">Net Promoter Score</option>
                                </select>
                            </div>
                            
                            <div class="space-y-2">
                                <label class="text-sm font-medium">Is Required</label>
                                <div class="flex items-center space-x-2">
                                    <input type="checkbox" name="Questions[@i].IsRequired" value="true" @(Model.Questions[i].IsRequired ? "checked" : "") class="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary" />
                                    <span class="text-sm">Make this question required</span>
                                </div>
                            </div>
                            
                            <div class="options-container @(Model.Questions[i].Type == "text" || Model.Questions[i].Type == "rating" || Model.Questions[i].Type == "nps" ? "hidden" : "")">
                                <div class="space-y-2">
                                    <label class="text-sm font-medium">Options</label>
                                    <div class="options-list space-y-2">
                                        @for (int j = 0; j < Model.Questions[i].Options.Count; j++)
                                        {
                                            <div class="option-item flex items-center gap-2">
                                                <input type="text" name="Questions[@i].Options[@j]" value="@Model.Questions[i].Options[j]" class="flex-1 h-9 rounded-md border border-input bg-background px-3 py-1 text-sm" placeholder="Option text" />
                                                <button type="button" class="remove-option text-destructive">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                    <button type="button" class="add-option mt-2 inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input hover:bg-accent hover:text-accent-foreground h-9 px-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus mr-1"><path d="M5 12h14"></path><path d="M12 5v14"></path></svg>
                                        Add Option
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <button type="button" id="add-question" class="mt-4 inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus-circle mr-2"><circle cx="12" cy="12" r="10"></circle><path d="M12 8v8"></path><path d="M8 12h8"></path></svg>
                Add Question
            </button>
        </div>
        
        <div class="flex justify-end gap-4">
            <button type="button" id="reset-form" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw mr-2"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M3 21v-5h5"></path></svg>
                Reset
            </button>
            <button type="submit" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-save mr-2"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>
                Create Survey
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const questionsContainer = document.getElementById('questions-container');
            const addQuestionButton = document.getElementById('add-question');
            const resetFormButton = document.getElementById('reset-form');
            let questionCount = @Model.Questions.Count;
            
            // Add new question
            addQuestionButton.addEventListener('click', function() {
                // Create a unique ID for the new question
                const questionId = uuidv4();
                
                const questionTemplate = `
                    <div class="question-card p-6 border rounded-lg">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="font-medium">Question ${questionCount + 1}</h3>
                            
                            <button type="button" class="remove-question text-sm text-destructive" data-index="${questionCount}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
                                <span>Remove</span>
                            </button>
                        </div>
                        
                        <div class="space-y-4">
                            <input type="hidden" name="Questions[${questionCount}].Id" value="${questionId}" />
                            
                            <div class="space-y-2">
                                <label class="text-sm font-medium">Question Text</label>
                                <input type="text" name="Questions[${questionCount}].Text" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" placeholder="Enter your question" />
                            </div>
                            
                            <div class="space-y-2">
                                <label class="text-sm font-medium">Question Type</label>
                                <select 
                                    name="Questions[${questionCount}].Type" 
                                    class="question-type flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                >
                                    <option value="text" selected>Text Input</option>
                                    <option value="single-choice">Single Choice</option>
                                    <option value="multiple-choice">Multiple Choice</option>
                                    <option value="rating">Rating</option>
                                    <option value="dropdown">Dropdown</option>
                                    <option value="nps">Net Promoter Score</option>
                                </select>
                            </div>
                            
                            <div class="space-y-2">
                                <label class="text-sm font-medium">Is Required</label>
                                <div class="flex items-center space-x-2">
                                    <input type="checkbox" name="Questions[${questionCount}].IsRequired" value="true" class="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary" />
                                    <span class="text-sm">Make this question required</span>
                                </div>
                            </div>
                            
                            <div class="options-container hidden">
                                <div class="space-y-2">
                                    <label class="text-sm font-medium">Options</label>
                                    <div class="options-list space-y-2">
                                        <div class="option-item flex items-center gap-2">
                                            <input type="text" name="Questions[${questionCount}].Options[0]" class="flex-1 h-9 rounded-md border border-input bg-background px-3 py-1 text-sm" placeholder="Option text" />
                                            <button type="button" class="remove-option text-destructive">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg>
                                            </button>
                                        </div>
                                        <div class="option-item flex items-center gap-2">
                                            <input type="text" name="Questions[${questionCount}].Options[1]" class="flex-1 h-9 rounded-md border border-input bg-background px-3 py-1 text-sm" placeholder="Option text" />
                                            <button type="button" class="remove-option text-destructive">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg>
                                            </button>
                                        </div>
                                    </div>
                                    <button type="button" class="add-option mt-2 inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input hover:bg-accent hover:text-accent-foreground h-9 px-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus mr-1"><path d="M5 12h14"></path><path d="M12 5v14"></path></svg>
                                        Add Option
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                const tempContainer = document.createElement('div');
                tempContainer.innerHTML = questionTemplate;
                const newQuestion = tempContainer.firstElementChild;
                
                questionsContainer.appendChild(newQuestion);
                questionCount++;
                
                // Initialize event listeners for the new question
                initQuestionEvents(newQuestion);
            });
            
            // Remove question
            function handleRemoveQuestion(event) {
                const button = event.currentTarget;
                const questionCard = button.closest('.question-card');
                
                if (questionCard && confirm('Are you sure you want to remove this question?')) {
                    questionCard.remove();
                    
                    // Update question numbers
                    const questions = questionsContainer.querySelectorAll('.question-card');
                    questions.forEach((q, index) => {
                        q.querySelector('h3').textContent = `Question ${index + 1}`;
                        q.querySelector('.remove-question').dataset.index = index;
                    });
                    
                    questionCount = questions.length;
                }
            }
            
            // Toggle options container based on question type
            function handleQuestionTypeChange(event) {
                const select = event.currentTarget;
                const questionCard = select.closest('.question-card');
                const optionsContainer = questionCard.querySelector('.options-container');
                
                if (select.value === 'text' || select.value === 'rating' || select.value === 'nps') {
                    optionsContainer.classList.add('hidden');
                } else {
                    optionsContainer.classList.remove('hidden');
                }
            }
            
            // Add option
            function handleAddOption(event) {
                const button = event.currentTarget;
                const optionsList = button.closest('.space-y-2').querySelector('.options-list');
                const questionCard = button.closest('.question-card');
                const questionIndex = questionCard.querySelector('.remove-question').dataset.index;
                const optionItems = optionsList.querySelectorAll('.option-item');
                const optionIndex = optionItems.length;
                
                const optionTemplate = `
                    <div class="option-item flex items-center gap-2">
                        <input type="text" name="Questions[${questionIndex}].Options[${optionIndex}]" class="flex-1 h-9 rounded-md border border-input bg-background px-3 py-1 text-sm" placeholder="Option text" />
                        <button type="button" class="remove-option text-destructive">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg>
                        </button>
                    </div>
                `;
                
                const tempContainer = document.createElement('div');
                tempContainer.innerHTML = optionTemplate;
                const newOption = tempContainer.firstElementChild;
                
                optionsList.appendChild(newOption);
                
                // Initialize remove option button
                newOption.querySelector('.remove-option').addEventListener('click', handleRemoveOption);
            }
            
            // Remove option
            function handleRemoveOption(event) {
                const button = event.currentTarget;
                const optionItem = button.closest('.option-item');
                const optionsList = optionItem.closest('.options-list');
                
                if (optionsList.querySelectorAll('.option-item').length > 1) {
                    optionItem.remove();
                    
                    // Update option indices
                    const questionCard = optionsList.closest('.question-card');
                    const questionIndex = questionCard.querySelector('.remove-question').dataset.index;
                    const options = optionsList.querySelectorAll('.option-item');
                    
                    options.forEach((opt, index) => {
                        opt.querySelector('input').name = `Questions[${questionIndex}].Options[${index}]`;
                    });
                } else {
                    alert('Each question must have at least one option.');
                }
            }
            
            // Initialize event listeners for existing questions
            function initQuestionEvents(questionCard) {
                const removeQuestionButton = questionCard.querySelector('.remove-question');
                const questionTypeSelect = questionCard.querySelector('.question-type');
                const addOptionButton = questionCard.querySelector('.add-option');
                const removeOptionButtons = questionCard.querySelectorAll('.remove-option');
                
                if (removeQuestionButton) {
                    removeQuestionButton.addEventListener('click', handleRemoveQuestion);
                }
                
                if (questionTypeSelect) {
                    questionTypeSelect.addEventListener('change', handleQuestionTypeChange);
                }
                
                if (addOptionButton) {
                    addOptionButton.addEventListener('click', handleAddOption);
                }
                
                removeOptionButtons.forEach(button => {
                    button.addEventListener('click', handleRemoveOption);
                });
            }
            
            // Initialize all existing questions
            document.querySelectorAll('.question-card').forEach(initQuestionEvents);
            
            // Reset form
            resetFormButton.addEventListener('click', function() {
                if (confirm('Are you sure you want to reset the form? All your changes will be lost.')) {
                    window.location.reload();
                }
            });
        });
    </script>
}
